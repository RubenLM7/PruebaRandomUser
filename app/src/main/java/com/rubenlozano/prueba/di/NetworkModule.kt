package com.rubenlozano.prueba.diimport android.content.Contextimport com.chuckerteam.chucker.api.ChuckerInterceptorimport com.rubenlozano.prueba.data.datasource.remote.api.Apiimport com.rubenlozano.prueba.utils.Constants.BASE_URLimport dagger.Moduleimport dagger.Providesimport dagger.hilt.InstallInimport dagger.hilt.android.qualifiers.ApplicationContextimport dagger.hilt.components.SingletonComponentimport okhttp3.OkHttpClientimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport javax.inject.Singleton@Module@InstallIn(SingletonComponent::class)class NetworkModule {    @[Provides Singleton]    fun okHttpClient(@ApplicationContext context: Context): OkHttpClient =        OkHttpClient.Builder()            .addInterceptor(                ChuckerInterceptor.Builder(context)                    .build()            ).build()    @[Provides Singleton]    fun retrofit(okHttpClient: OkHttpClient): Retrofit =        Retrofit.Builder()            .client(okHttpClient)            .baseUrl(BASE_URL)            .addConverterFactory(GsonConverterFactory.create())            .build()    @[Provides]    fun api(retrofit: Retrofit): Api = retrofit.create(Api::class.java)}