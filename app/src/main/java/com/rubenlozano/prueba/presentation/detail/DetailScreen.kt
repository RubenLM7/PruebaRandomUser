package com.rubenlozano.prueba.presentation.detailimport android.util.Logimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.colorResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextDecorationimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport com.bumptech.glide.integration.compose.ExperimentalGlideComposeApiimport com.bumptech.glide.integration.compose.GlideImageimport com.bumptech.glide.integration.compose.placeholderimport com.rubenlozano.prueba.Rimport com.rubenlozano.prueba.data.model.Userimport com.rubenlozano.prueba.ui.theme.BlueAppimport com.rubenlozano.prueba.ui.theme.PruebaThemeclass DetailScreen(private val usersModel: User) : AndroidScreen() {    @Composable    override fun Content() {        val viewModel: DetailContract.ViewModel = getViewModel<DetailViewModel>()        viewModel::onEventDispatcher.invoke(DetailContract.Intent.SetData(usersModel))        PruebaTheme {            DetailScreenContent(uiState = viewModel.uiState.collectAsState().value, onEventDispatcher = viewModel::onEventDispatcher)        }    }}@OptIn(ExperimentalGlideComposeApi::class)@Composablefun DetailScreenContent(    uiState: DetailContract.UIState = DetailContract.UIState(),    onEventDispatcher : (DetailContract.Intent) -> Unit) {    Column(        modifier = Modifier            .fillMaxSize()            .background(BlueApp),    ) {        Row (            Modifier                .fillMaxWidth()                .height(50.dp)            ){            IconButton(onClick = {                Log.d("TTT", "DetailScreenContent: screen back")                onEventDispatcher.invoke(DetailContract.Intent.BackToMain)            }) {               Icon(                   imageVector = Icons.Default.ArrowBack,                   contentDescription = null,                   tint = Color.White)            }            Text(                modifier = Modifier.padding(10.dp),                text = uiState.data.nameSurname,                style = TextStyle(                    fontSize = 24.sp,                    fontWeight = FontWeight.Bold,                ),            )        }        Spacer(modifier = Modifier.height(16.dp))        GlideImage(            model = uiState.data.picture,            contentDescription = uiState.data.nameSurname,            modifier = Modifier                .clip(shape = RoundedCornerShape(8.dp))                .size(250.dp)                .align(Alignment.CenterHorizontally),            loading = placeholder(R.drawable.ic_launcher_foreground),        )        Spacer(modifier = Modifier.height(15.dp))        Text(            text = "Personal data",            modifier = Modifier.padding(5.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 22.sp,                fontWeight = FontWeight.Bold,                textDecoration = TextDecoration.Underline,            ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = "Gender:  ${uiState.data.gender}",            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 18.sp,                color = Color.White,            ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = "Dni:  ${uiState.data.dniNumber}",            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(            fontSize = 18.sp,            color = Color.White,        ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = "Age:  ${uiState.data.age}",            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 18.sp,                color = Color.White,            ),        )        Spacer(modifier = Modifier.height(15.dp))        Text(            text = "Location",            modifier = Modifier.padding(5.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 22.sp,                textDecoration = TextDecoration.Underline,                fontWeight = FontWeight.Bold            ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = uiState.data.location,            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 18.sp,                color = Color.White,            ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = "Nationality:  ${uiState.data.nationality}",            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 18.sp,                color = Color.White,            ),        )        Spacer(modifier = Modifier.height(15.dp))        Text(            text = "Contact",            modifier = Modifier.padding(5.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 22.sp,                textDecoration = TextDecoration.Underline,                fontWeight = FontWeight.Bold            ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = "Phone number:  ${uiState.data.phoneNumber}",            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 18.sp,                color = Color.White,            ),        )        Spacer(modifier = Modifier.height(5.dp))        Text(            text = "Email:  ${uiState.data.email}",            modifier = Modifier.padding(10.dp, 0.dp,0.dp,0.dp),            style = TextStyle(                fontSize = 18.sp,                color = Color.White,            ),        )    }}@Composable@Preview(showBackground = true)fun DetailScreenPreview() {    DetailScreenContent(){}}